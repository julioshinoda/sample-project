// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	proto "github.com/julioshinoda/sample-project/pb/proto"
)

// OrdersConnectorClient is an autogenerated mock type for the OrdersConnectorClient type
type OrdersConnectorClient struct {
	mock.Mock
}

// CreateOrder provides a mock function with given fields: ctx, in, opts
func (_m *OrdersConnectorClient) CreateOrder(ctx context.Context, in *proto.OrderRequest, opts ...grpc.CallOption) (*proto.CreateResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *proto.CreateResponse
	if rf, ok := ret.Get(0).(func(context.Context, *proto.OrderRequest, ...grpc.CallOption) *proto.CreateResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.CreateResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.OrderRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDocumentsPerOrder provides a mock function with given fields: ctx, in, opts
func (_m *OrdersConnectorClient) GetDocumentsPerOrder(ctx context.Context, in *proto.InvoiceNumber, opts ...grpc.CallOption) (*proto.DocumentResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *proto.DocumentResponse
	if rf, ok := ret.Get(0).(func(context.Context, *proto.InvoiceNumber, ...grpc.CallOption) *proto.DocumentResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.DocumentResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.InvoiceNumber, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrder provides a mock function with given fields: ctx, in, opts
func (_m *OrdersConnectorClient) GetOrder(ctx context.Context, in *proto.OrderId, opts ...grpc.CallOption) (*proto.Response, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *proto.Response
	if rf, ok := ret.Get(0).(func(context.Context, *proto.OrderId, ...grpc.CallOption) *proto.Response); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.OrderId, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderLog provides a mock function with given fields: ctx, in, opts
func (_m *OrdersConnectorClient) GetOrderLog(ctx context.Context, in *proto.Search, opts ...grpc.CallOption) (*proto.OrderLogResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *proto.OrderLogResponse
	if rf, ok := ret.Get(0).(func(context.Context, *proto.Search, ...grpc.CallOption) *proto.OrderLogResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.OrderLogResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.Search, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrdersByStatus provides a mock function with given fields: ctx, in, opts
func (_m *OrdersConnectorClient) GetOrdersByStatus(ctx context.Context, in *proto.StatusCode, opts ...grpc.CallOption) (*proto.Response, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *proto.Response
	if rf, ok := ret.Get(0).(func(context.Context, *proto.StatusCode, ...grpc.CallOption) *proto.Response); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.StatusCode, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrdersForCustomer provides a mock function with given fields: ctx, in, opts
func (_m *OrdersConnectorClient) GetOrdersForCustomer(ctx context.Context, in *proto.CustomerId, opts ...grpc.CallOption) (*proto.Response, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *proto.Response
	if rf, ok := ret.Get(0).(func(context.Context, *proto.CustomerId, ...grpc.CallOption) *proto.Response); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.CustomerId, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrdersForInvoice provides a mock function with given fields: ctx, in, opts
func (_m *OrdersConnectorClient) GetOrdersForInvoice(ctx context.Context, in *proto.InvoiceNumber, opts ...grpc.CallOption) (*proto.Response, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *proto.Response
	if rf, ok := ret.Get(0).(func(context.Context, *proto.InvoiceNumber, ...grpc.CallOption) *proto.Response); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.InvoiceNumber, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrdersbyFullTextSearch provides a mock function with given fields: ctx, in, opts
func (_m *OrdersConnectorClient) GetOrdersbyFullTextSearch(ctx context.Context, in *proto.Search, opts ...grpc.CallOption) (*proto.Response, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *proto.Response
	if rf, ok := ret.Get(0).(func(context.Context, *proto.Search, ...grpc.CallOption) *proto.Response); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.Search, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReturnsOfPosition provides a mock function with given fields: ctx, in, opts
func (_m *OrdersConnectorClient) GetReturnsOfPosition(ctx context.Context, in *proto.OrderpositionSearchRequest, opts ...grpc.CallOption) (*proto.OrderpositionReturnsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *proto.OrderpositionReturnsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *proto.OrderpositionSearchRequest, ...grpc.CallOption) *proto.OrderpositionReturnsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.OrderpositionReturnsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.OrderpositionSearchRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSpecificDocumentOfOrder provides a mock function with given fields: ctx, in, opts
func (_m *OrdersConnectorClient) GetSpecificDocumentOfOrder(ctx context.Context, in *proto.FileRequest, opts ...grpc.CallOption) (*proto.FileResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *proto.FileResponse
	if rf, ok := ret.Get(0).(func(context.Context, *proto.FileRequest, ...grpc.CallOption) *proto.FileResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.FileResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.FileRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOrderStatus provides a mock function with given fields: ctx, in, opts
func (_m *OrdersConnectorClient) UpdateOrderStatus(ctx context.Context, in *proto.StatusUpdateRequest, opts ...grpc.CallOption) (*proto.Response, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *proto.Response
	if rf, ok := ret.Get(0).(func(context.Context, *proto.StatusUpdateRequest, ...grpc.CallOption) *proto.Response); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.StatusUpdateRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	util "github.com/julioshinoda/sample-project/util"
)

// CustomerConnectorClient is an autogenerated mock type for the CustomerConnectorClient type
type CustomerConnectorClient struct {
	mock.Mock
}

// DeleteCustomer provides a mock function with given fields: ctx, in, opts
func (_m *CustomerConnectorClient) DeleteCustomer(ctx context.Context, in *util.CustomerEntity, opts ...grpc.CallOption) (*util.CustomerSaveResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *util.CustomerSaveResponse
	if rf, ok := ret.Get(0).(func(context.Context, *util.CustomerEntity, ...grpc.CallOption) *util.CustomerSaveResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*util.CustomerSaveResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *util.CustomerEntity, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCustomer provides a mock function with given fields: ctx, in, opts
func (_m *CustomerConnectorClient) GetCustomer(ctx context.Context, in *util.Uuid, opts ...grpc.CallOption) (*util.CustomerResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *util.CustomerResponse
	if rf, ok := ret.Get(0).(func(context.Context, *util.Uuid, ...grpc.CallOption) *util.CustomerResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*util.CustomerResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *util.Uuid, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCustomerByEmail provides a mock function with given fields: ctx, in, opts
func (_m *CustomerConnectorClient) GetCustomerByEmail(ctx context.Context, in *util.Email, opts ...grpc.CallOption) (*util.EmailResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *util.EmailResponse
	if rf, ok := ret.Get(0).(func(context.Context, *util.Email, ...grpc.CallOption) *util.EmailResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*util.EmailResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *util.Email, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCustomerById provides a mock function with given fields: ctx, in, opts
func (_m *CustomerConnectorClient) GetCustomerById(ctx context.Context, in *util.CustomerEntityId, opts ...grpc.CallOption) (*util.CustomerResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *util.CustomerResponse
	if rf, ok := ret.Get(0).(func(context.Context, *util.CustomerEntityId, ...grpc.CallOption) *util.CustomerResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*util.CustomerResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *util.CustomerEntityId, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostCustomer provides a mock function with given fields: ctx, in, opts
func (_m *CustomerConnectorClient) PostCustomer(ctx context.Context, in *util.CustomerEntity, opts ...grpc.CallOption) (*util.CustomerSaveResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *util.CustomerSaveResponse
	if rf, ok := ret.Get(0).(func(context.Context, *util.CustomerEntity, ...grpc.CallOption) *util.CustomerSaveResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*util.CustomerSaveResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *util.CustomerEntity, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutCustomer provides a mock function with given fields: ctx, in, opts
func (_m *CustomerConnectorClient) PutCustomer(ctx context.Context, in *util.CustomerEntity, opts ...grpc.CallOption) (*util.CustomerSaveResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *util.CustomerSaveResponse
	if rf, ok := ret.Get(0).(func(context.Context, *util.CustomerEntity, ...grpc.CallOption) *util.CustomerSaveResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*util.CustomerSaveResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *util.CustomerEntity, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
